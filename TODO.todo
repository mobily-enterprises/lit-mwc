☐ input
  ☐ button
  ☐ checkbox
  ☐ color
  ☐ date
  ☐ datetime-local
  ☐ email
  ☐ file
  ☐ image
  ☐ month
  ☐ number
  ☐ password
  ☐ radio
  ☐ range
  ☐ reset
  ☐ search
  ☐ submit
  ☐ tel
  ☐ text
  ☐ time
  ☐ url
  ☐ week
☐ button
☐ meter
☐ progress
☐ select
☐ textarea

TONY
☐ nn-form:
  ✔ Load data from the server before showing the form @done(2019-04-29 21:14) @project(☐ nn-form)
  ✔ Overwrite a record (PUT with an existing ID), or create a new one (POST, no ID) or create a record with an arbitrary ID (POST with a new ID)? @done(2019-05-03 07:17) @project(☐ nn-form)
    ✔ Stop reflecting submit(), implement gatherFormElements() that gathers all values and send to server @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Refresh the data with the saved info coming back from the server after saving @done(2019-05-03 07:17) @project(☐ nn-form)
    ✔ Use gatherFormElements() and assign their corresponding .value @done(2019-05-03 07:17) @project(☐ nn-form)
    ✔ Make sure user can define their own assign mechanism @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Make important method redefineable without subclassing @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Render ALL input fields automatically disabled while the form is being submitted @done(2019-05-05 21:14) @project(☐ nn-form)
    ✔ Again, use gatherFormElements(), get status before and save, submit, restore status @done(2019-05-05 21:14) @project(☐ nn-form)
  ✔ Implement nn:style:label="..." @done(2019-05-11 17:21) @project(☐ nn-form)
  ✔ Check https://github.com/ricardofbarros/linter-js-standard/issues/229 @done(2019-05-12 12:31) @project(☐ nn-form)
  ✔ Wait for: https://stackoverflow.com/questions/56096524/which-elements-properties-are-reflected-into-attributes-in-html @done(2019-05-13 00:17) @project(☐ nn-form)
  ✔ Check if we need more reflected properties in common.js, added disabled now -- more? @done(2019-05-13 00:17) @project(☐ nn-form)
  ✔ Redefine setAttribute() rather than attrbute observer to carry on changes to contained elements @done(2019-05-14 09:28) @project(☐ nn-form)

  ☐ VALIDATION
    ☐ Highlight the problem fields if the form is NOT a success
    ☐ https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation
    ☐ Use default HTML methods, which nn- elements will style better
    ☐ Allow the user to provide a function that returns the "problem fields" reading the returned json
    ☐ Make sure validation works the same client-side and server-side

  ☐ Submit the form when the user presses ENTER on a inputText
   ☐ This should be done by Input.js which already has .form

   ☐ Provide coverage for ALL of the HTML form elements https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Forms
    ☐ ALL <input> types
    ☐ ALL other possible fields

  ☐ Add hidden elements for each nn- element if parent form is native, so that form will submit if used natively

  ☐ Native patching https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
    ☐ <form> has `target` (attribute). This value can be overridden by a formtarget attribute on a <button> or <input> element. Will this work through shadow DOM?
    ☐ document.forms returns the forms. Will the forms in the shadow dom be returned?
    ☐ HTMLFormElement.elements and HTMLFormElement.length are only <button>, <fieldset>, <input>, <object>, etc.

☐ nn-network:

☐ nn-realtime-field (or include in nn-form?):

☐ nn-autocomplete (using datalist):
WATCH
☐  https://github.com/w3c/webcomponents/issues/187 VERY CRUCIAL TICKET ON ELEMENT-FORM ASSOCIATION

RAPHAEL
☐ (Tony asks) Shall we reflect the attribute 'tabindex'? Or is it likely to mess up things if the nn element has the same tabIndex as the native element in the shadow dom? Does it even make sense to set it in the shadow dom at all?
  ☐ Needs testing

Components:
☐ Fix Label Mixin for inputs
☐ (Tony's suggestion) Implement basic drawer element
☐ (Tony's suggestion) Implement basic tabs/tab elements

☐ Header (or Top App bar https://material.io/design/components/app-bars-top.html)
☐ Nav bar (or Bottom App Bar https://material.io/design/components/app-bars-bottom.html)
☐ FAB
☐ Toast
☐ Slider (use native)
☐ Switch (maybe checkbox style variant?)
☐ Progress bar

Styling:
☐ Simple theme mechanism (use litElement recommended methods: import css tagged templates, custom css properties)
☐ Text and textarea default theme
☐ Buttons default theme
☐ Checkbox default theme
☐ Advanced theme mechanism (Allow default styles to be overriden either by extending the element or by replacing the default theme css tagged template file)
