✔ Decide simple theme mechanism (use litElement recommended methods: import css tagged templates, custom css properties) @done(2019-09-18 07:00)
  ✔ Text and textarea default theme @done(2019-09-18 07:00)
  ✔ Buttons default theme @done(2019-09-18 07:00)
  ✔ Checkbox default theme @done(2019-09-18 07:00)
  ✔ Advanced theme mechanism (Allow default styles to be overriden either by extending the element or by replacing the default theme css tagged template file) @done(2019-09-18 07:00)

✔ ALL <input> types @done(2019-09-16 19:56) @project(☐ nn-form)
  ✔ button @done(2019-09-14 05:49)
  ✔ input-datalist (input with datalist) @done(2019-09-14 05:51)
  ✔ checkbox @done(2019-09-14 05:51)
  ✔ date @done(2019-09-14 05:51)
  ✔ datetime-local @done(2019-09-14 05:51)
  ✔ number @done(2019-09-15 13:19)
  ✔ email @done(2019-09-15 13:20)
  ✔ url @done(2019-09-15 13:25)
  ✔ image (NOT IMPLEMENTED, as used to create submit buttons) @done(2019-09-15 13:31)
  ✔ week @done(2019-09-15 13:32)
  ✔ month @done(2019-09-15 13:33)
  ✔ password @done(2019-09-14 05:52)
  ✔ radio @done(2019-09-15 13:43)
  ✔ file @done(2019-09-16 06:29)
  ✔ range @done(2019-09-16 10:26)
  ✔ color @done(2019-09-16 10:38)
  ✔ reset (NOT IMPLEMENTED, discouraged in the spes themselves) @done(2019-09-14 05:55)
  ✔ search @done(2019-09-14 06:29)
  ✔ submit @done(2019-09-16 11:18)
  ✔ tel @done(2019-09-14 06:21)
  ✔ text @done(2019-09-14 05:57)
  ✔ time @done(2019-09-14 05:57)
✔ ALL other possible fields @done(2019-09-16 19:56) @project(☐ nn-form)
  ✔ button @done(2019-09-14 05:49)
  ✔ meter @done(2019-09-16 11:41)
  ✔ progress @done(2019-09-16 11:57)
  ✔ select @done(2019-09-14 05:49)
  ✔ textarea @done(2019-09-16 11:57)
  ✔ form @done(2019-09-14 05:49)

nn-form:
✔ Load data from the server before showing the form @done(2019-04-29 21:14) @project(☐ nn-form)
✔ Overwrite a record (PUT with an existing ID), or create a new one (POST, no ID) or create a record with an arbitrary ID (POST with a new ID)? @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Stop reflecting submit(), implement gatherFormElements() that gathers all values and send to server @done(2019-05-03 07:17) @project(☐ nn-form)
✔ Refresh the data with the saved info coming back from the server after saving @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Use gatherFormElements() and assign their corresponding .value @done(2019-05-03 07:17) @project(☐ nn-form)
  ✔ Make sure user can define their own assign mechanism @done(2019-05-03 07:17) @project(☐ nn-form)
✔ Make important method redefineable without subclassing @done(2019-05-03 07:17) @project(☐ nn-form)
✔ Render ALL input fields automatically disabled while the form is being submitted @done(2019-05-05 21:14) @project(☐ nn-form)
  ✔ Again, use gatherFormElements(), get status before and save, submit, restore status @done(2019-05-05 21:14) @project(☐ nn-form)
✔ Implement nn:style:label="..." @done(2019-05-11 17:21) @project(☐ nn-form)
✔ Check https://github.com/ricardofbarros/linter-js-standard/issues/229 @done(2019-05-12 12:31) @project(☐ nn-form)
✔ Wait for: https://stackoverflow.com/questions/56096524/which-elements-properties-are-reflected-into-attributes-in-html @done(2019-05-13 00:17) @project(☐ nn-form)
✔ Check if we need more reflected properties in common.js, added disabled now -- more? @done(2019-05-13 00:17) @project(☐ nn-form)
✔ Redefine setAttribute() rather than attrbute observer to carry on changes to contained elements @done(2019-05-14 09:28) @project(☐ nn-form)

Validation and forms
✔ Highlight the problem fields if the form is NOT a success @done(2019-05-21 07:46) @project(☐ nn-form)
✔ https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation @done(2019-05-21 07:46) @project(☐ nn-form)
✔ Use default HTML methods, which nn- elements will style better @done(2019-05-21 07:46) @project(☐ nn-form)
✔ Allow the user to provide a function that returns the "problem fields" reading the returned json @done(2019-05-21 07:46) @project(☐ nn-form)
✔ Make sure validation works the same client-side and server-side @done(2019-05-21 07:47) @project(☐ nn-form)
✔ Make styling for error message, similar to <meter> containing message @done(2019-09-18 17:42)
✔ Made default themes directory structure @done(2019-09-19 07:05)
✔ Split nn-form into nn-form and en-form @done(2019-09-21 14:17)
✔ en-form will inherit from nn-form and add all of the error setting, preloading, etc. @done(2019-09-21 14:18)
✔ Form @done(2019-09-27 09:54)
  ✔ Implement validate-on-render and validate-on-load @done(2019-09-22 07:28)
  ✔ Honour the method specified by the user as a priority @done(2019-09-22 07:39)
  ✔ Make sure that if recordId is undefined a request isn't Made @done(2019-09-25 06:38)
  ✔ Check enter on submit: find out native behaviour, emulate it, offer option @done(2019-09-27 07:23)
  ✔ Implement real-time form submit of single fields @done(2019-09-27 08:09)
✔ Tidy up @done(2019-09-26 07:43)
  ✔ Rename element classes from Element to NnElement to facilitate subclassing @done(2019-09-26 07:43)
  ✔ [Rename files to lower case @done(2019-09-26 07:43)
☐ Implement en-autocomplete (using datalist) and ee-autocomplete (no datalist, manual selecting)
  ✔ Add 'id' property finder to default config of children elements @done(2019-09-30 10:21)
  ✔ Write getIdValue() for -li elements @done(2019-09-30 10:21)
  ✔ Let ee-autocomplete decide if selection will be visual or text (visual will only work with elements with pickedElement) @done(2019-09-30 10:21)
  ✔ Implement 'value' in ee-autocomplete-input-spans (comma separated, configurable separator, id in config) @done(2019-09-30 10:21)
  ✔ Make it work with textinput forms @done(2019-09-30 10:38)
  ☐ Tony:
    ✔ Find "bridge" way for text autocomplete, but sending ID @done(2019-09-30 15:06) @project(☐ Tony)
    ✔ Add formElement interface (constraint API, form) @done(2019-10-01 06:48) @project(☐ Tony)
    ✔ Add error messages @done(2019-10-01 06:48) @project(☐ Tony)
    ✔ Make sure element has ALL API for input elements (no native reflection, we are on our own) @done(2019-10-01 07:40) @project(☐ Raphael)
    ☐ Implement text selection autocomplete
    ☐ allow-duplicates parameter
    ☐ Develop implementation of "X" to delete an item (delete span)
  ☐ Raphael:
    ✔ Allow "X" to delete items, and just delete them for now @done (9/30/2019, 9:31:26 PM)
    ☐ Give visual feedback that an ID is selected
    ☐ KEYS: Keyboard bindings to navigate through elements (left/right arrows)
    ☐ KEYS: Make sure "backspace" and "delete" works (delete element)
    ☐ KEYS: Escape to close selection
    ☐ Make sure element is FULLY aria compatible and usable
☐ Make sure constraints API is followed properly, so that formElementMixin uses it for real, and so does ee-autocomplete-input-spans
☐ Form: Add WeakMap to form, so that it will set inflight per-element

☐ Extra elements
  ✔ Implement ee-network (backport from existing) @done(2019-09-22 20:01)
  ✔ Implement Toast ee-toast (snack-bar) @done(2019-09-23 05:08)
  ✔ Implement ee-drawer @done (9/25/2019, 5:10:30 PM)
  ☐ Implement ee-tabs
  ☐ Implement ee-drawer
  ☐ Implement ee-header (or Top App bar https://material.io/design/components/app-bars-top.html)
  ☐ Implement en-nav -bar(or Bottom App Bar https://material.io/design/components/app-bars-bottom.html)
  ☐ Implement en-fab
  ☐ Implement en-switch (maybe deriving from nn-checkbox)
  ☐ (Later?) Implement ee-input-file following https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/

(LATER)
☐ Working with native forms https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
  ☐ Check that autocomplete works
  ☐ Make sure that 'submit' (type=submit) button really submits
  ☐ Do nn elements work with normal forms?
    ☐ IF NOT, Add hidden elements for each nn- element if parent form is native, so that form will submit if used natively
  ☐ <form> has `target` (attribute). This value can be overridden by a formtarget attribute on a <button> or <input> element. Will this work through shadow DOM?
    ☐ if not, can it be hacked so that it does?
  ☐ document.forms returns the forms. Will the elements in the shadow dom be returned?
    ☐ If not, can it be hacked to? (hint: setter)
    ☐ Check that nn-form, using gather
  ☐ HTMLFormElement.elements and HTMLFormElement.length are only <button>, <fieldset>, <input>, <object>, etc.
    ☐ Can it be hacked to return all elements including nn ones?
    ☐ If that happens, will it make any difference?
  ☐ Submit the form when the user preses ENTER on a sole inputText

Issues:
  ✔ #6: make sure focus is redirected to inputText (https://github.com/mobily-enterprises/tpe/issues/6) @done (9/30/2019, 9:33:43 PM)
  ✔ #7: Improve focus visual feedback (https://github.com/mobily-enterprises/tpe/issues/7) @done (9/30/2019, 9:33:44 PM)

☐ Material Theme:
  ✔ Base, custom css properties @done (9/30/2019, 9:33:46 PM)
  ☐ implement it for all nn elements
  ☐ document it
  ☐ extend to en and ee elements

☐ Basic (default) style:
  ☐ Base, custom css properties
  ☐ implement it for all nn elements
  ☐ document it
  ☐ extend to en and ee elements

DOCUMENT VALIDATION BLUEPRINT:
☐ OVERRIDE checkValidity (nn, in FormElementMixin)
  ☐ Set `shownValidationMessage` to ''
  ☐ Run setCustomValidity('')
  ☐ checkValidity will call the native one (which will emit event etc)
    ☐ If native checkValidity FAILS, THE INVALID EVENT WILL BE FIRED NATIVELY
    ☐ If native checkValidity WINS, we run own validator. So
      ☐ If validator returns a problem
        ☐ Run setCustomValidity() with custom error message
        ☐ Run reportValidity(), so THE INVALID EVENT WILL BE FIRED NATIVELY

☐ Listen to `invalid` events (nn, in FormElementMixin)
  ☐ Set `shownValidationMessage`
    ☐ If custom validator used (invalid has customError), use that
    ☐ If not, use native messages OR a translation with helper function

☐ OVERRIDE form.checkValidity (nn)
  ☐ For each contained elements
    ☐ Run checkValidity()

☐ OVERRIDE form.submit (en)
  ☐ Run checkValidity()
  ☐ Run submit

☐ Watch https://github.com/w3c/webcomponents/issues/187 VERY CRUCIAL TICKET ON ELEMENT-FORM ASSOCIATION

☐ Add TPE to https://github.com/web-padawan/awesome-lit-html
